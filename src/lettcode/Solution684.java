package lettcode;

/**
 * @author: sherlock
 * @description:冗余连接，并查集，这里还有问题。。。。
 * @date: 2020/8/26 9:57
 */
public class Solution684 {
    static int[] father = new int[1000];

    public static int[] findRedundantConnection(int[][] edges) {
        for (int i = 0; i <= edges.length; i++) {
            father[i] = i;
        }
        int[] res = new int[2];
        for (int i = 0; i < edges.length; i++) {
            Integer res1 = find(edges[i][0]);
            Integer res2 = find(edges[i][1]);
            if (res1 == res2) {
                res[0] = res1;
                res[1] = res2;
                return res;
            } else {
                union(res1,res2);
            }
        }
        return res;
    }

    public static Integer find(int x) {
        if (x == father[x]) return x;
        return father[x] = find(father[x]);
    }

    public static void union(int x, int y) {
        Integer rootP = find(x);
        Integer rootQ = find(y);
        if (rootP != rootQ) {
            father[rootP] = rootQ;
        }
    }

    public static void main(String[] args) {
        int[] arr = findRedundantConnection(new int[][]{{142,145},{70,73},{45,80},{89,126},{126,134},{46,132},{63,174},{81,151},{154,184},{37,182},{155,166},{36,155},{28,119},{35,135},{5,77},{174,200},{1,29},{167,191},{140,143},{125,171},{25,172},{67,169},{138,143},{11,86},{106,199},{65,75},{73,162},{4,121},{95,180},{39,137},{14,117},{76,170},{68,81},{84,167},{31,65},{116,136},{115,186},{78,98},{111,159},{22,88},{160,180},{43,134},{107,194},{98,115},{134,168},{23,41},{25,150},{61,113},{34,177},{86,144},{41,148},{115,181},{91,158},{6,121},{12,69},{99,141},{39,192},{84,176},{99,116},{15,79},{10,168},{102,165},{134,170},{41,109},{64,193},{14,125},{60,159},{55,164},{18,195},{132,157},{40,170},{72,103},{17,104},{25,101},{26,139},{107,178},{56,104},{29,85},{72,106},{5,59},{21,82},{29,78},{133,174},{13,71},{19,70},{159,173},{114,180},{188,189},{105,177},{81,89},{6,178},{57,129},{64,138},{63,86},{44,48},{48,56},{131,147},{92,192},{67,190},{118,138},{35,49},{96,156},{55,77},{142,152},{102,189},{143,162},{44,90},{8,32},{34,137},{16,194},{12,181},{53,145},{137,149},{103,180},{67,197},{82,170},{122,173},{15,28},{9,57},{99,179},{76,187},{65,96},{102,118},{20,150},{62,138},{38,185},{9,139},{50,168},{18,30},{24,174},{9,120},{3,82},{123,194},{54,72},{71,179},{2,88},{182,195},{27,175},{122,127},{20,104},{35,102},{99,180},{167,196},{175,182},{93,121},{83,146},{12,44},{95,96},{7,18},{26,45},{107,185},{86,88},{25,199},{61,63},{80,135},{45,94},{128,142},{58,174},{138,198},{51,149},{152,182},{23,33},{18,67},{23,121},{66,143},{40,194},{5,144},{42,192},{116,154},{8,166},{147,175},{41,163},{110,165},{50,135},{112,155},{60,183},{33,53},{73,171},{47,100},{74,169},{70,189},{51,131},{87,143},{126,158},{78,174},{52,76},{129,146},{46,84},{96,143},{108,175},{97,152},{66,153},{100,137},{161,174},{79,194},{8,181},{55,159},{124,144},{130,185},{73,132}});
        System.out.println(new int[][]{{142,145},{70,73},{45,80},{89,126},{126,134},{46,132},{63,174},{81,151},{154,184},{37,182},{155,166},{36,155},{28,119},{35,135},{5,77},{174,200},{1,29},{167,191},{140,143},{125,171},{25,172},{67,169},{138,143},{11,86},{106,199},{65,75},{73,162},{4,121},{95,180},{39,137},{14,117},{76,170},{68,81},{84,167},{31,65},{116,136},{115,186},{78,98},{111,159},{22,88},{160,180},{43,134},{107,194},{98,115},{134,168},{23,41},{25,150},{61,113},{34,177},{86,144},{41,148},{115,181},{91,158},{6,121},{12,69},{99,141},{39,192},{84,176},{99,116},{15,79},{10,168},{102,165},{134,170},{41,109},{64,193},{14,125},{60,159},{55,164},{18,195},{132,157},{40,170},{72,103},{17,104},{25,101},{26,139},{107,178},{56,104},{29,85},{72,106},{5,59},{21,82},{29,78},{133,174},{13,71},{19,70},{159,173},{114,180},{188,189},{105,177},{81,89},{6,178},{57,129},{64,138},{63,86},{44,48},{48,56},{131,147},{92,192},{67,190},{118,138},{35,49},{96,156},{55,77},{142,152},{102,189},{143,162},{44,90},{8,32},{34,137},{16,194},{12,181},{53,145},{137,149},{103,180},{67,197},{82,170},{122,173},{15,28},{9,57},{99,179},{76,187},{65,96},{102,118},{20,150},{62,138},{38,185},{9,139},{50,168},{18,30},{24,174},{9,120},{3,82},{123,194},{54,72},{71,179},{2,88},{182,195},{27,175},{122,127},{20,104},{35,102},{99,180},{167,196},{175,182},{93,121},{83,146},{12,44},{95,96},{7,18},{26,45},{107,185},{86,88},{25,199},{61,63},{80,135},{45,94},{128,142},{58,174},{138,198},{51,149},{152,182},{23,33},{18,67},{23,121},{66,143},{40,194},{5,144},{42,192},{116,154},{8,166},{147,175},{41,163},{110,165},{50,135},{112,155},{60,183},{33,53},{73,171},{47,100},{74,169},{70,189},{51,131},{87,143},{126,158},{78,174},{52,76},{129,146},{46,84},{96,143},{108,175},{97,152},{66,153},{100,137},{161,174},{79,194},{8,181},{55,159},{124,144},{130,185},{73,132}}.length);
//        int[] arr = findRedundantConnection(new int[][]{{1, 2}, {1, 3}, {2, 3}});
//        int[] arr = findRedundantConnection(new int[][]{{1, 2}, {2, 4}, {3, 4}, {1, 4}, {1, 5}});
        System.out.println(arr[0] + "\t" + arr[1]);
    }
}
